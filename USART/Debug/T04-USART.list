
T04-USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007cc  080007cc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080007cc  080007cc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007cc  080007cc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007cc  080007cc  000107cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007d0  080007d0  000107d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080007d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000010  080007e4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080007e4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000006ac  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000166  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  00020858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000078  00000000  00000000  000208e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000137b  00000000  00000000  00020960  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000556  00000000  00000000  00021cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000055c9  00000000  00000000  00022231  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000277fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001a8  00000000  00000000  00027878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800076c 	.word	0x0800076c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800076c 	.word	0x0800076c

080001d4 <initTIM2>:

#define SYSTICK_BASE	0xE000E010
#define SYSTICK ((SYSTICK_type *) SYSTICK_BASE)

void initTIM2(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
    /*
     * TIM2 connected to APB1, running at 16MHz
     */
    setbit(RCC->APB1ENR, 0);  /* enable Clock for TIM2 */
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <initTIM2+0x50>)
 80001da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001dc:	4a11      	ldr	r2, [pc, #68]	; (8000224 <initTIM2+0x50>)
 80001de:	f043 0301 	orr.w	r3, r3, #1
 80001e2:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 16000;            /* prescaler - fill according your needs */
 80001e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001e8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80001ec:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 1000;            /* autoreload - fill according your needs */
 80001ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001f6:	62da      	str	r2, [r3, #44]	; 0x2c
    setbit(TIM2->CR1, 0);     /* enable TIM2 */
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]
    clearbit(TIM2->SR, 0);    /* status TIM2 */
 8000208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020c:	691b      	ldr	r3, [r3, #16]
 800020e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000212:	f023 0301 	bic.w	r3, r3, #1
 8000216:	6113      	str	r3, [r2, #16]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40023800 	.word	0x40023800

08000228 <digit>:

static unsigned char chars[10] = {192, 249, 164, 176, 153, 146, 130, 248, 128, 144};
static unsigned char segms[4] = {1, 2, 4, 8};

void digit(unsigned char data, unsigned char segment)
{
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	460a      	mov	r2, r1
 8000232:	71fb      	strb	r3, [r7, #7]
 8000234:	4613      	mov	r3, r2
 8000236:	71bb      	strb	r3, [r7, #6]
	//	GPIOA9 - serial data
	//	GPIOA8 - clock
	//	GPIOB5 - latch

	clearbit(*GPIOB_ODR, 5); //latch = 0
 8000238:	4b35      	ldr	r3, [pc, #212]	; (8000310 <digit+0xe8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a34      	ldr	r2, [pc, #208]	; (8000310 <digit+0xe8>)
 800023e:	f023 0320 	bic.w	r3, r3, #32
 8000242:	6013      	str	r3, [r2, #0]

	for(int i = 7; i >= 0; --i) //select the pattern of digits
 8000244:	2307      	movs	r3, #7
 8000246:	60fb      	str	r3, [r7, #12]
 8000248:	e026      	b.n	8000298 <digit+0x70>
	{
		clearbit(*GPIOA_ODR, 8); //clk = 0
 800024a:	4b32      	ldr	r3, [pc, #200]	; (8000314 <digit+0xec>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a31      	ldr	r2, [pc, #196]	; (8000314 <digit+0xec>)
 8000250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000254:	6013      	str	r3, [r2, #0]
		sendserial((chars[data] >> i) & 1, *GPIOA_ODR, 9);
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	4a2f      	ldr	r2, [pc, #188]	; (8000318 <digit+0xf0>)
 800025a:	5cd3      	ldrb	r3, [r2, r3]
 800025c:	461a      	mov	r2, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	fa42 f303 	asr.w	r3, r2, r3
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d006      	beq.n	800027a <digit+0x52>
 800026c:	4b29      	ldr	r3, [pc, #164]	; (8000314 <digit+0xec>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a28      	ldr	r2, [pc, #160]	; (8000314 <digit+0xec>)
 8000272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000276:	6013      	str	r3, [r2, #0]
 8000278:	e005      	b.n	8000286 <digit+0x5e>
 800027a:	4b26      	ldr	r3, [pc, #152]	; (8000314 <digit+0xec>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a25      	ldr	r2, [pc, #148]	; (8000314 <digit+0xec>)
 8000280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000284:	6013      	str	r3, [r2, #0]
		setbit(*GPIOA_ODR, 8); //clk = 1
 8000286:	4b23      	ldr	r3, [pc, #140]	; (8000314 <digit+0xec>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a22      	ldr	r2, [pc, #136]	; (8000314 <digit+0xec>)
 800028c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000290:	6013      	str	r3, [r2, #0]
	for(int i = 7; i >= 0; --i) //select the pattern of digits
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3b01      	subs	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	2b00      	cmp	r3, #0
 800029c:	dad5      	bge.n	800024a <digit+0x22>
	}

	for(int i = 7; i >= 0; --i) //select which led to turn on
 800029e:	2307      	movs	r3, #7
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	e026      	b.n	80002f2 <digit+0xca>
	{
		clearbit(*GPIOA_ODR, 8);
 80002a4:	4b1b      	ldr	r3, [pc, #108]	; (8000314 <digit+0xec>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <digit+0xec>)
 80002aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ae:	6013      	str	r3, [r2, #0]
		sendserial((segms[segment] >> i) & 1, *GPIOA_ODR, 9);
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	4a1a      	ldr	r2, [pc, #104]	; (800031c <digit+0xf4>)
 80002b4:	5cd3      	ldrb	r3, [r2, r3]
 80002b6:	461a      	mov	r2, r3
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	fa42 f303 	asr.w	r3, r2, r3
 80002be:	f003 0301 	and.w	r3, r3, #1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d006      	beq.n	80002d4 <digit+0xac>
 80002c6:	4b13      	ldr	r3, [pc, #76]	; (8000314 <digit+0xec>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <digit+0xec>)
 80002cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d0:	6013      	str	r3, [r2, #0]
 80002d2:	e005      	b.n	80002e0 <digit+0xb8>
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <digit+0xec>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a0e      	ldr	r2, [pc, #56]	; (8000314 <digit+0xec>)
 80002da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002de:	6013      	str	r3, [r2, #0]
		setbit(*GPIOA_ODR, 8);
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <digit+0xec>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	; (8000314 <digit+0xec>)
 80002e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ea:	6013      	str	r3, [r2, #0]
	for(int i = 7; i >= 0; --i) //select which led to turn on
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dad5      	bge.n	80002a4 <digit+0x7c>
	}

	setbit(*GPIOB_ODR, 5); //latch = 1
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <digit+0xe8>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <digit+0xe8>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40020414 	.word	0x40020414
 8000314:	40020014 	.word	0x40020014
 8000318:	20000000 	.word	0x20000000
 800031c:	2000000c 	.word	0x2000000c

08000320 <display>:

void display (unsigned char s0, unsigned char s1, unsigned char s2, unsigned char s3)
{
 8000320:	b590      	push	{r4, r7, lr}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4604      	mov	r4, r0
 8000328:	4608      	mov	r0, r1
 800032a:	4611      	mov	r1, r2
 800032c:	461a      	mov	r2, r3
 800032e:	4623      	mov	r3, r4
 8000330:	71fb      	strb	r3, [r7, #7]
 8000332:	4603      	mov	r3, r0
 8000334:	71bb      	strb	r3, [r7, #6]
 8000336:	460b      	mov	r3, r1
 8000338:	717b      	strb	r3, [r7, #5]
 800033a:	4613      	mov	r3, r2
 800033c:	713b      	strb	r3, [r7, #4]
	//show s0 on position 0
	digit(s0, 0);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff70 	bl	8000228 <digit>
	digit(s1, 1);
 8000348:	79bb      	ldrb	r3, [r7, #6]
 800034a:	2101      	movs	r1, #1
 800034c:	4618      	mov	r0, r3
 800034e:	f7ff ff6b 	bl	8000228 <digit>
	digit(s2, 2);
 8000352:	797b      	ldrb	r3, [r7, #5]
 8000354:	2102      	movs	r1, #2
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff66 	bl	8000228 <digit>
	digit(s3, 3);
 800035c:	793b      	ldrb	r3, [r7, #4]
 800035e:	2103      	movs	r1, #3
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff61 	bl	8000228 <digit>

}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bd90      	pop	{r4, r7, pc}
	...

08000370 <binary_to_bcd>:

int binary_to_bcd(unsigned int val)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	int s = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
	int bcd = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
	while(val > 0)
 8000380:	e017      	b.n	80003b2 <binary_to_bcd+0x42>
	{
		bcd += (val % 10) << s;
 8000382:	6879      	ldr	r1, [r7, #4]
 8000384:	4b10      	ldr	r3, [pc, #64]	; (80003c8 <binary_to_bcd+0x58>)
 8000386:	fba3 2301 	umull	r2, r3, r3, r1
 800038a:	08da      	lsrs	r2, r3, #3
 800038c:	4613      	mov	r3, r2
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	4413      	add	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	1aca      	subs	r2, r1, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	409a      	lsls	r2, r3
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	4413      	add	r3, r2
 800039e:	60bb      	str	r3, [r7, #8]
		s += 4;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	3304      	adds	r3, #4
 80003a4:	60fb      	str	r3, [r7, #12]
		val /= 10;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a07      	ldr	r2, [pc, #28]	; (80003c8 <binary_to_bcd+0x58>)
 80003aa:	fba2 2303 	umull	r2, r3, r2, r3
 80003ae:	08db      	lsrs	r3, r3, #3
 80003b0:	607b      	str	r3, [r7, #4]
	while(val > 0)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1e4      	bne.n	8000382 <binary_to_bcd+0x12>
	}
	return bcd;
 80003b8:	68bb      	ldr	r3, [r7, #8]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	cccccccd 	.word	0xcccccccd

080003cc <sendChar>:

void sendChar (char ch)  {
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
  // wait till transmit register is empty 7th bit of SR
  while (!getbit(USART2->SR, 7));
 80003d6:	bf00      	nop
 80003d8:	4b07      	ldr	r3, [pc, #28]	; (80003f8 <sendChar+0x2c>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <sendChar+0xc>
  USART2->DR = ch;
 80003e4:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <sendChar+0x2c>)
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	6053      	str	r3, [r2, #4]
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40004400 	.word	0x40004400

080003fc <receiveChar>:

char receiveChar(char * a) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
   // read from DR while receive register is not empty - 5th bit of SR
   if (getbit(USART2->SR, 5)) {
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <receiveChar+0x30>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 0320 	and.w	r3, r3, #32
 800040c:	2b00      	cmp	r3, #0
 800040e:	d006      	beq.n	800041e <receiveChar+0x22>
	   *a = USART2->DR;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <receiveChar+0x30>)
 8000412:	685b      	ldr	r3, [r3, #4]
 8000414:	b2da      	uxtb	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	701a      	strb	r2, [r3, #0]
	   return 1;
 800041a:	2301      	movs	r3, #1
 800041c:	e000      	b.n	8000420 <receiveChar+0x24>
   }
   return 0;
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr
 800042c:	40004400 	.word	0x40004400

08000430 <serialInit>:
/*
 * USART2 init
 * USART2 is connected to APB1 bus
 * USART2 uses PA2 as TX and PA3 as RX
 */
void serialInit(void){
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
	setbit(RCC->APB1ENR, 17);	// Enable APB1 clock
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <serialInit+0x48>)
 8000436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000438:	4a0f      	ldr	r2, [pc, #60]	; (8000478 <serialInit+0x48>)
 800043a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800043e:	6413      	str	r3, [r2, #64]	; 0x40
	setbit(USART2->CR1, 13);	// Enable USART2
 8000440:	4b0e      	ldr	r3, [pc, #56]	; (800047c <serialInit+0x4c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <serialInit+0x4c>)
 8000446:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800044a:	60d3      	str	r3, [r2, #12]
	setbit(USART2->CR1, 2);		// USART2 - enable receive
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <serialInit+0x4c>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	4a0a      	ldr	r2, [pc, #40]	; (800047c <serialInit+0x4c>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	60d3      	str	r3, [r2, #12]
	setbit(USART2->CR1, 3);		// USART2 - enable transmit
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <serialInit+0x4c>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a07      	ldr	r2, [pc, #28]	; (800047c <serialInit+0x4c>)
 800045e:	f043 0308 	orr.w	r3, r3, #8
 8000462:	60d3      	str	r3, [r2, #12]
	USART2->BRR = (104 << 4); 	// USART2 baudrate, clock/(16*baudrate) should work
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <serialInit+0x4c>)
 8000466:	f44f 62d0 	mov.w	r2, #1664	; 0x680
 800046a:	609a      	str	r2, [r3, #8]
/*
  * STM32F401 HSI clock - 16 MHz
  * baudrate: 9600
  */
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40023800 	.word	0x40023800
 800047c:	40004400 	.word	0x40004400

08000480 <gpio_init>:

void gpio_init (void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
	setbit(RCC->AHB1ENR, 0);	// Enable AHB1 clock
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <gpio_init+0x4c>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <gpio_init+0x4c>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
	setbit(GPIOA->MODER, 5);	// PA2 alternate function, p. 157 of reference manual
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <gpio_init+0x50>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0e      	ldr	r2, [pc, #56]	; (80004d0 <gpio_init+0x50>)
 8000496:	f043 0320 	orr.w	r3, r3, #32
 800049a:	6013      	str	r3, [r2, #0]
	setbit(GPIOA->MODER, 7);	// PA3 alternate function
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <gpio_init+0x50>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <gpio_init+0x50>)
 80004a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004a6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= 0x0700;	// alternate function, PA2 will be USART2_TX
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <gpio_init+0x50>)
 80004aa:	6a1b      	ldr	r3, [r3, #32]
 80004ac:	4a08      	ldr	r2, [pc, #32]	; (80004d0 <gpio_init+0x50>)
 80004ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004b2:	6213      	str	r3, [r2, #32]
								// see p. 162 of reference manual
								// see p. 45 of STM32F401xE datasheet
	GPIOA->AFR[0] |= 0x7000;	// alternate function, PA3
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <gpio_init+0x50>)
 80004b6:	6a1b      	ldr	r3, [r3, #32]
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <gpio_init+0x50>)
 80004ba:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 80004be:	6213      	str	r3, [r2, #32]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop
 80004cc:	40023800 	.word	0x40023800
 80004d0:	40020000 	.word	0x40020000

080004d4 <sendString>:

void sendString (char * str, int length)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < length; i++)
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	e009      	b.n	80004f8 <sendString+0x24>
	{
		sendChar(str[i]);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	4413      	add	r3, r2
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff ff6d 	bl	80003cc <sendChar>
	for (int i = 0; i < length; i++)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	dbf1      	blt.n	80004e4 <sendString+0x10>
	}
	sendChar('\n');
 8000500:	200a      	movs	r0, #10
 8000502:	f7ff ff63 	bl	80003cc <sendChar>
	sendChar('\r');
 8000506:	200d      	movs	r0, #13
 8000508:	f7ff ff60 	bl	80003cc <sendChar>
}
 800050c:	bf00      	nop
 800050e:	3710      	adds	r7, #16
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}

08000514 <main>:

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af00      	add	r7, sp, #0
	char mess[20] = { 0 };
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
	char a;
	int i = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]

	setbit(*RCC_CR, 16);
 800052c:	4b5d      	ldr	r3, [pc, #372]	; (80006a4 <main+0x190>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a5c      	ldr	r2, [pc, #368]	; (80006a4 <main+0x190>)
 8000532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000536:	6013      	str	r3, [r2, #0]
//	setbit(*RCC_CFGR, 0);
	setbit(*RCC_AHB1ENR, 0);
 8000538:	4b5b      	ldr	r3, [pc, #364]	; (80006a8 <main+0x194>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a5a      	ldr	r2, [pc, #360]	; (80006a8 <main+0x194>)
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	6013      	str	r3, [r2, #0]
	setbit(*RCC_AHB1ENR, 1);
 8000544:	4b58      	ldr	r3, [pc, #352]	; (80006a8 <main+0x194>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a57      	ldr	r2, [pc, #348]	; (80006a8 <main+0x194>)
 800054a:	f043 0302 	orr.w	r3, r3, #2
 800054e:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_MODER, 16);
 8000550:	4b56      	ldr	r3, [pc, #344]	; (80006ac <main+0x198>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a55      	ldr	r2, [pc, #340]	; (80006ac <main+0x198>)
 8000556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800055a:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 16);
 800055c:	4b54      	ldr	r3, [pc, #336]	; (80006b0 <main+0x19c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a53      	ldr	r2, [pc, #332]	; (80006b0 <main+0x19c>)
 8000562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000566:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 17);
 8000568:	4b51      	ldr	r3, [pc, #324]	; (80006b0 <main+0x19c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a50      	ldr	r2, [pc, #320]	; (80006b0 <main+0x19c>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_MODER, 18);
 8000574:	4b4d      	ldr	r3, [pc, #308]	; (80006ac <main+0x198>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a4c      	ldr	r2, [pc, #304]	; (80006ac <main+0x198>)
 800057a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800057e:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 18);
 8000580:	4b4b      	ldr	r3, [pc, #300]	; (80006b0 <main+0x19c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a4a      	ldr	r2, [pc, #296]	; (80006b0 <main+0x19c>)
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 19);
 800058c:	4b48      	ldr	r3, [pc, #288]	; (80006b0 <main+0x19c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a47      	ldr	r2, [pc, #284]	; (80006b0 <main+0x19c>)
 8000592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000596:	6013      	str	r3, [r2, #0]
	setbit(*GPIOB_MODER, 10);
 8000598:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <main+0x1a0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <main+0x1a0>)
 800059e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005a2:	6013      	str	r3, [r2, #0]
	setbit(*GPIOB_OSPEEDR, 10);
 80005a4:	4b44      	ldr	r3, [pc, #272]	; (80006b8 <main+0x1a4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a43      	ldr	r2, [pc, #268]	; (80006b8 <main+0x1a4>)
 80005aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ae:	6013      	str	r3, [r2, #0]
	setbit(*GPIOB_OSPEEDR, 11);
 80005b0:	4b41      	ldr	r3, [pc, #260]	; (80006b8 <main+0x1a4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a40      	ldr	r2, [pc, #256]	; (80006b8 <main+0x1a4>)
 80005b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ba:	6013      	str	r3, [r2, #0]

	unsigned int x;

	initTIM2();
 80005bc:	f7ff fe0a 	bl	80001d4 <initTIM2>
	gpio_init();
 80005c0:	f7ff ff5e 	bl	8000480 <gpio_init>
	serialInit();
 80005c4:	f7ff ff34 	bl	8000430 <serialInit>

	//1.Send single character from Nucleo to PC
	sendString("Task1: ", 7);
 80005c8:	2107      	movs	r1, #7
 80005ca:	483c      	ldr	r0, [pc, #240]	; (80006bc <main+0x1a8>)
 80005cc:	f7ff ff82 	bl	80004d4 <sendString>
	sendString("s", 1);
 80005d0:	2101      	movs	r1, #1
 80005d2:	483b      	ldr	r0, [pc, #236]	; (80006c0 <main+0x1ac>)
 80005d4:	f7ff ff7e 	bl	80004d4 <sendString>
	sendChar('\n');
 80005d8:	200a      	movs	r0, #10
 80005da:	f7ff fef7 	bl	80003cc <sendChar>
	sendChar('\r');
 80005de:	200d      	movs	r0, #13
 80005e0:	f7ff fef4 	bl	80003cc <sendChar>

	//2.Modify template to send string
	sendString("Task2: ", 7);
 80005e4:	2107      	movs	r1, #7
 80005e6:	4837      	ldr	r0, [pc, #220]	; (80006c4 <main+0x1b0>)
 80005e8:	f7ff ff74 	bl	80004d4 <sendString>
	sendString("Sentence sent from nucleo to computer.", 38);
 80005ec:	2126      	movs	r1, #38	; 0x26
 80005ee:	4836      	ldr	r0, [pc, #216]	; (80006c8 <main+0x1b4>)
 80005f0:	f7ff ff70 	bl	80004d4 <sendString>
	sendChar('\n');
 80005f4:	200a      	movs	r0, #10
 80005f6:	f7ff fee9 	bl	80003cc <sendChar>
	sendChar('\r');
 80005fa:	200d      	movs	r0, #13
 80005fc:	f7ff fee6 	bl	80003cc <sendChar>
	sendString("Task3: \n", 8);
 8000600:	2108      	movs	r1, #8
 8000602:	4832      	ldr	r0, [pc, #200]	; (80006cc <main+0x1b8>)
 8000604:	f7ff ff66 	bl	80004d4 <sendString>
		//sendString(mess, 10);
		//for(volatile int j = 0; j < 500; j++);

//#ifdef DEBUG

		if (receiveChar(&a)) {
 8000608:	1cfb      	adds	r3, r7, #3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fef6 	bl	80003fc <receiveChar>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f8      	beq.n	8000608 <main+0xf4>
			if (a != '\r' && a != '\n')
 8000616:	78fb      	ldrb	r3, [r7, #3]
 8000618:	2b0d      	cmp	r3, #13
 800061a:	d00c      	beq.n	8000636 <main+0x122>
 800061c:	78fb      	ldrb	r3, [r7, #3]
 800061e:	2b0a      	cmp	r3, #10
 8000620:	d009      	beq.n	8000636 <main+0x122>
				mess[i++] = a;
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	1c5a      	adds	r2, r3, #1
 8000626:	61fa      	str	r2, [r7, #28]
 8000628:	78fa      	ldrb	r2, [r7, #3]
 800062a:	f107 0120 	add.w	r1, r7, #32
 800062e:	440b      	add	r3, r1
 8000630:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000634:	e035      	b.n	80006a2 <main+0x18e>
			else {
				if (getbit(TIM2->SR, 0)) {
 8000636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800063a:	691b      	ldr	r3, [r3, #16]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0e1      	beq.n	8000608 <main+0xf4>
					x = binary_to_bcd(mess[0] - '0');
 8000644:	793b      	ldrb	r3, [r7, #4]
 8000646:	3b30      	subs	r3, #48	; 0x30
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fe91 	bl	8000370 <binary_to_bcd>
 800064e:	4603      	mov	r3, r0
 8000650:	61bb      	str	r3, [r7, #24]
					display(x >> 12 & 0x0f, x >> 8 & 0x0f, x >> 4 & 0x0f,
 8000652:	69bb      	ldr	r3, [r7, #24]
 8000654:	0b1b      	lsrs	r3, r3, #12
 8000656:	b2db      	uxtb	r3, r3
 8000658:	f003 030f 	and.w	r3, r3, #15
 800065c:	b2d8      	uxtb	r0, r3
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	b2db      	uxtb	r3, r3
 8000664:	f003 030f 	and.w	r3, r3, #15
 8000668:	b2d9      	uxtb	r1, r3
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	091b      	lsrs	r3, r3, #4
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 030f 	and.w	r3, r3, #15
 8000674:	b2da      	uxtb	r2, r3
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f7ff fe4e 	bl	8000320 <display>
							x & 0x0f);
					sendString(mess, i);
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	69f9      	ldr	r1, [r7, #28]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff23 	bl	80004d4 <sendString>
					i = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
					clearbit(TIM2->SR, 0);
 8000692:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	6113      	str	r3, [r2, #16]
		if (receiveChar(&a)) {
 80006a2:	e7b1      	b.n	8000608 <main+0xf4>
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40023830 	.word	0x40023830
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020008 	.word	0x40020008
 80006b4:	40020400 	.word	0x40020400
 80006b8:	40020408 	.word	0x40020408
 80006bc:	08000784 	.word	0x08000784
 80006c0:	0800078c 	.word	0x0800078c
 80006c4:	08000790 	.word	0x08000790
 80006c8:	08000798 	.word	0x08000798
 80006cc:	080007c0 	.word	0x080007c0

080006d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006d0:	480d      	ldr	r0, [pc, #52]	; (8000708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006d2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <LoopForever+0x6>)
  ldr r1, =_edata
 80006da:	490d      	ldr	r1, [pc, #52]	; (8000710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006dc:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <LoopForever+0xe>)
  movs r3, #0
 80006de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006e0:	e002      	b.n	80006e8 <LoopCopyDataInit>

080006e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e6:	3304      	adds	r3, #4

080006e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006ec:	d3f9      	bcc.n	80006e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006f0:	4c0a      	ldr	r4, [pc, #40]	; (800071c <LoopForever+0x16>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f4:	e001      	b.n	80006fa <LoopFillZerobss>

080006f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f8:	3204      	adds	r2, #4

080006fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006fc:	d3fb      	bcc.n	80006f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006fe:	f000 f811 	bl	8000724 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000702:	f7ff ff07 	bl	8000514 <main>

08000706 <LoopForever>:

LoopForever:
    b LoopForever
 8000706:	e7fe      	b.n	8000706 <LoopForever>
  ldr   r0, =_estack
 8000708:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000714:	080007d4 	.word	0x080007d4
  ldr r2, =_sbss
 8000718:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800071c:	2000002c 	.word	0x2000002c

08000720 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC_IRQHandler>
	...

08000724 <__libc_init_array>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4e0d      	ldr	r6, [pc, #52]	; (800075c <__libc_init_array+0x38>)
 8000728:	4c0d      	ldr	r4, [pc, #52]	; (8000760 <__libc_init_array+0x3c>)
 800072a:	1ba4      	subs	r4, r4, r6
 800072c:	10a4      	asrs	r4, r4, #2
 800072e:	2500      	movs	r5, #0
 8000730:	42a5      	cmp	r5, r4
 8000732:	d109      	bne.n	8000748 <__libc_init_array+0x24>
 8000734:	4e0b      	ldr	r6, [pc, #44]	; (8000764 <__libc_init_array+0x40>)
 8000736:	4c0c      	ldr	r4, [pc, #48]	; (8000768 <__libc_init_array+0x44>)
 8000738:	f000 f818 	bl	800076c <_init>
 800073c:	1ba4      	subs	r4, r4, r6
 800073e:	10a4      	asrs	r4, r4, #2
 8000740:	2500      	movs	r5, #0
 8000742:	42a5      	cmp	r5, r4
 8000744:	d105      	bne.n	8000752 <__libc_init_array+0x2e>
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800074c:	4798      	blx	r3
 800074e:	3501      	adds	r5, #1
 8000750:	e7ee      	b.n	8000730 <__libc_init_array+0xc>
 8000752:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000756:	4798      	blx	r3
 8000758:	3501      	adds	r5, #1
 800075a:	e7f2      	b.n	8000742 <__libc_init_array+0x1e>
 800075c:	080007cc 	.word	0x080007cc
 8000760:	080007cc 	.word	0x080007cc
 8000764:	080007cc 	.word	0x080007cc
 8000768:	080007d0 	.word	0x080007d0

0800076c <_init>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	bf00      	nop
 8000770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000772:	bc08      	pop	{r3}
 8000774:	469e      	mov	lr, r3
 8000776:	4770      	bx	lr

08000778 <_fini>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr
