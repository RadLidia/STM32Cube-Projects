
LEDdisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000420  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005b4  080005b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005b4  080005b4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080005b4  080005b4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005b4  080005b4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005b4  080005b4  000105b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005b8  080005b8  000105b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080005bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000010  080005cc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080005cc  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000025b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000173  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000070  00000000  00000000  00020410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000058  00000000  00000000  00020480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000ae9  00000000  00000000  000204d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000188  00000000  00000000  00020fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003103  00000000  00000000  00021149  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002424c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000011c  00000000  00000000  000242c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800059c 	.word	0x0800059c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800059c 	.word	0x0800059c

080001d4 <digit>:
static unsigned char chars[10] = {192, 249, 164, 176, 153, 146, 130, 248, 128, 144};
static unsigned char segms[4] = {1, 2, 4, 8};
static unsigned int a = 0;

void digit(unsigned char data, unsigned char segment)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	460a      	mov	r2, r1
 80001de:	71fb      	strb	r3, [r7, #7]
 80001e0:	4613      	mov	r3, r2
 80001e2:	71bb      	strb	r3, [r7, #6]
	//	GPIOA9 - serial data
	//	GPIOA8 - clock
	//	GPIOB5 - latch

	clearbit(*GPIOB_ODR, 5); //latch = 0
 80001e4:	4b35      	ldr	r3, [pc, #212]	; (80002bc <digit+0xe8>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a34      	ldr	r2, [pc, #208]	; (80002bc <digit+0xe8>)
 80001ea:	f023 0320 	bic.w	r3, r3, #32
 80001ee:	6013      	str	r3, [r2, #0]

	for(int i = 7; i >= 0; --i) //select the pattern of digits
 80001f0:	2307      	movs	r3, #7
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e026      	b.n	8000244 <digit+0x70>
	{
		clearbit(*GPIOA_ODR, 8); //clk = 0
 80001f6:	4b32      	ldr	r3, [pc, #200]	; (80002c0 <digit+0xec>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a31      	ldr	r2, [pc, #196]	; (80002c0 <digit+0xec>)
 80001fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000200:	6013      	str	r3, [r2, #0]
		sendserial((chars[data] >> i) & 1, *GPIOA_ODR, 9);
 8000202:	79fb      	ldrb	r3, [r7, #7]
 8000204:	4a2f      	ldr	r2, [pc, #188]	; (80002c4 <digit+0xf0>)
 8000206:	5cd3      	ldrb	r3, [r2, r3]
 8000208:	461a      	mov	r2, r3
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	fa42 f303 	asr.w	r3, r2, r3
 8000210:	f003 0301 	and.w	r3, r3, #1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d006      	beq.n	8000226 <digit+0x52>
 8000218:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <digit+0xec>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <digit+0xec>)
 800021e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000222:	6013      	str	r3, [r2, #0]
 8000224:	e005      	b.n	8000232 <digit+0x5e>
 8000226:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <digit+0xec>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a25      	ldr	r2, [pc, #148]	; (80002c0 <digit+0xec>)
 800022c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000230:	6013      	str	r3, [r2, #0]
		setbit(*GPIOA_ODR, 8); //clk = 1
 8000232:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <digit+0xec>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <digit+0xec>)
 8000238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800023c:	6013      	str	r3, [r2, #0]
	for(int i = 7; i >= 0; --i) //select the pattern of digits
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	3b01      	subs	r3, #1
 8000242:	60fb      	str	r3, [r7, #12]
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	2b00      	cmp	r3, #0
 8000248:	dad5      	bge.n	80001f6 <digit+0x22>
	}

	for(int i = 7; i >= 0; --i) //select which led to turn on
 800024a:	2307      	movs	r3, #7
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	e026      	b.n	800029e <digit+0xca>
	{
		clearbit(*GPIOA_ODR, 8);
 8000250:	4b1b      	ldr	r3, [pc, #108]	; (80002c0 <digit+0xec>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1a      	ldr	r2, [pc, #104]	; (80002c0 <digit+0xec>)
 8000256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800025a:	6013      	str	r3, [r2, #0]
		sendserial((segms[segment] >> i) & 1, *GPIOA_ODR, 9);
 800025c:	79bb      	ldrb	r3, [r7, #6]
 800025e:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <digit+0xf4>)
 8000260:	5cd3      	ldrb	r3, [r2, r3]
 8000262:	461a      	mov	r2, r3
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	fa42 f303 	asr.w	r3, r2, r3
 800026a:	f003 0301 	and.w	r3, r3, #1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d006      	beq.n	8000280 <digit+0xac>
 8000272:	4b13      	ldr	r3, [pc, #76]	; (80002c0 <digit+0xec>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a12      	ldr	r2, [pc, #72]	; (80002c0 <digit+0xec>)
 8000278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027c:	6013      	str	r3, [r2, #0]
 800027e:	e005      	b.n	800028c <digit+0xb8>
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <digit+0xec>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <digit+0xec>)
 8000286:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800028a:	6013      	str	r3, [r2, #0]
		setbit(*GPIOA_ODR, 8);
 800028c:	4b0c      	ldr	r3, [pc, #48]	; (80002c0 <digit+0xec>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <digit+0xec>)
 8000292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000296:	6013      	str	r3, [r2, #0]
	for(int i = 7; i >= 0; --i) //select which led to turn on
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	3b01      	subs	r3, #1
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	dad5      	bge.n	8000250 <digit+0x7c>
	}

	setbit(*GPIOB_ODR, 5); //latch = 1
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <digit+0xe8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <digit+0xe8>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	3714      	adds	r7, #20
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr
 80002bc:	40020414 	.word	0x40020414
 80002c0:	40020014 	.word	0x40020014
 80002c4:	20000000 	.word	0x20000000
 80002c8:	2000000c 	.word	0x2000000c

080002cc <display>:

void display (unsigned char s0, unsigned char s1, unsigned char s2, unsigned char s3)
{
 80002cc:	b590      	push	{r4, r7, lr}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4604      	mov	r4, r0
 80002d4:	4608      	mov	r0, r1
 80002d6:	4611      	mov	r1, r2
 80002d8:	461a      	mov	r2, r3
 80002da:	4623      	mov	r3, r4
 80002dc:	71fb      	strb	r3, [r7, #7]
 80002de:	4603      	mov	r3, r0
 80002e0:	71bb      	strb	r3, [r7, #6]
 80002e2:	460b      	mov	r3, r1
 80002e4:	717b      	strb	r3, [r7, #5]
 80002e6:	4613      	mov	r3, r2
 80002e8:	713b      	strb	r3, [r7, #4]
	//show s0 on position 0
	digit(s0, 0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f7ff ff70 	bl	80001d4 <digit>
	digit(s1, 1);
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	2101      	movs	r1, #1
 80002f8:	4618      	mov	r0, r3
 80002fa:	f7ff ff6b 	bl	80001d4 <digit>
	digit(s2, 2);
 80002fe:	797b      	ldrb	r3, [r7, #5]
 8000300:	2102      	movs	r1, #2
 8000302:	4618      	mov	r0, r3
 8000304:	f7ff ff66 	bl	80001d4 <digit>
	digit(s3, 3);
 8000308:	793b      	ldrb	r3, [r7, #4]
 800030a:	2103      	movs	r1, #3
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff61 	bl	80001d4 <digit>

}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	bd90      	pop	{r4, r7, pc}
	...

0800031c <binary_to_bcd>:

int binary_to_bcd(unsigned int val)
{
 800031c:	b480      	push	{r7}
 800031e:	b085      	sub	sp, #20
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	int s = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	60fb      	str	r3, [r7, #12]
	int bcd = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	60bb      	str	r3, [r7, #8]
	while(val > 0)
 800032c:	e017      	b.n	800035e <binary_to_bcd+0x42>
	{
		bcd += (val % 10) << s;
 800032e:	6879      	ldr	r1, [r7, #4]
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <binary_to_bcd+0x58>)
 8000332:	fba3 2301 	umull	r2, r3, r3, r1
 8000336:	08da      	lsrs	r2, r3, #3
 8000338:	4613      	mov	r3, r2
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	4413      	add	r3, r2
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	1aca      	subs	r2, r1, r3
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	409a      	lsls	r2, r3
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	4413      	add	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
		s += 4;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	3304      	adds	r3, #4
 8000350:	60fb      	str	r3, [r7, #12]
		val /= 10;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a07      	ldr	r2, [pc, #28]	; (8000374 <binary_to_bcd+0x58>)
 8000356:	fba2 2303 	umull	r2, r3, r2, r3
 800035a:	08db      	lsrs	r3, r3, #3
 800035c:	607b      	str	r3, [r7, #4]
	while(val > 0)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1e4      	bne.n	800032e <binary_to_bcd+0x12>
	}
	return bcd;
 8000364:	68bb      	ldr	r3, [r7, #8]
}
 8000366:	4618      	mov	r0, r3
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	cccccccd 	.word	0xcccccccd

08000378 <init_systick>:

void init_systick(unsigned long s, unsigned char fast, unsigned char en)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
 8000380:	460b      	mov	r3, r1
 8000382:	70fb      	strb	r3, [r7, #3]
 8000384:	4613      	mov	r3, r2
 8000386:	70bb      	strb	r3, [r7, #2]
	// 0: AHB/8 -> (2 MHz)
	// 1: Processor clock (AHB) -> (16 MHz)
	SYSTICK->CTRL |= (fast << 2); // Currently set to run at 2 Mhz -> 5e-7s
 8000388:	4b10      	ldr	r3, [pc, #64]	; (80003cc <init_systick+0x54>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	78fa      	ldrb	r2, [r7, #3]
 800038e:	0092      	lsls	r2, r2, #2
 8000390:	4611      	mov	r1, r2
 8000392:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <init_systick+0x54>)
 8000394:	430b      	orrs	r3, r1
 8000396:	6013      	str	r3, [r2, #0]
	// Enable callback
	SYSTICK->CTRL |= (en << 1); // if argument 'en' is 1, then interrupt is enabled
 8000398:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <init_systick+0x54>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	78ba      	ldrb	r2, [r7, #2]
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a0a      	ldr	r2, [pc, #40]	; (80003cc <init_systick+0x54>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6013      	str	r3, [r2, #0]
	// Load the reload value
	SYSTICK->LOAD = s;
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <init_systick+0x54>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6053      	str	r3, [r2, #4]
	// Set the current value to 0
	SYSTICK->VAL = 0;
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <init_systick+0x54>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
	// Enable SysTick
	SYSTICK->CTRL |= (1 << 0);		// setbit(SYSTICK->CTRL, 1)
 80003b4:	4b05      	ldr	r3, [pc, #20]	; (80003cc <init_systick+0x54>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a04      	ldr	r2, [pc, #16]	; (80003cc <init_systick+0x54>)
 80003ba:	f043 0301 	orr.w	r3, r3, #1
 80003be:	6013      	str	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	e000e010 	.word	0xe000e010

080003d0 <SysTick_Handler>:

void SysTick_Handler(void) {
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
	a++;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Handler+0x18>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	3301      	adds	r3, #1
 80003da:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <SysTick_Handler+0x18>)
 80003dc:	6013      	str	r3, [r2, #0]
}
 80003de:	bf00      	nop
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	2000002c 	.word	0x2000002c

080003ec <main>:

int main() {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

	setbit(*RCC_CR, 16);
 80003f2:	4b3a      	ldr	r3, [pc, #232]	; (80004dc <main+0xf0>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a39      	ldr	r2, [pc, #228]	; (80004dc <main+0xf0>)
 80003f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003fc:	6013      	str	r3, [r2, #0]
	setbit(*RCC_CFGR, 0);
 80003fe:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <main+0xf4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <main+0xf4>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	6013      	str	r3, [r2, #0]
	setbit(*RCC_AHB1ENR, 0);
 800040a:	4b36      	ldr	r3, [pc, #216]	; (80004e4 <main+0xf8>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a35      	ldr	r2, [pc, #212]	; (80004e4 <main+0xf8>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6013      	str	r3, [r2, #0]
	setbit(*RCC_AHB1ENR, 1);
 8000416:	4b33      	ldr	r3, [pc, #204]	; (80004e4 <main+0xf8>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a32      	ldr	r2, [pc, #200]	; (80004e4 <main+0xf8>)
 800041c:	f043 0302 	orr.w	r3, r3, #2
 8000420:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_MODER, 16);
 8000422:	4b31      	ldr	r3, [pc, #196]	; (80004e8 <main+0xfc>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a30      	ldr	r2, [pc, #192]	; (80004e8 <main+0xfc>)
 8000428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042c:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 16);
 800042e:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <main+0x100>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <main+0x100>)
 8000434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000438:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 17);
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <main+0x100>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	4a2b      	ldr	r2, [pc, #172]	; (80004ec <main+0x100>)
 8000440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000444:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_MODER, 18);
 8000446:	4b28      	ldr	r3, [pc, #160]	; (80004e8 <main+0xfc>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a27      	ldr	r2, [pc, #156]	; (80004e8 <main+0xfc>)
 800044c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000450:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 18);
 8000452:	4b26      	ldr	r3, [pc, #152]	; (80004ec <main+0x100>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a25      	ldr	r2, [pc, #148]	; (80004ec <main+0x100>)
 8000458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800045c:	6013      	str	r3, [r2, #0]
	setbit(*GPIOA_OSPEEDR, 19);
 800045e:	4b23      	ldr	r3, [pc, #140]	; (80004ec <main+0x100>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a22      	ldr	r2, [pc, #136]	; (80004ec <main+0x100>)
 8000464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000468:	6013      	str	r3, [r2, #0]
	setbit(*GPIOB_MODER, 10);
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <main+0x104>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a20      	ldr	r2, [pc, #128]	; (80004f0 <main+0x104>)
 8000470:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000474:	6013      	str	r3, [r2, #0]
	setbit(*GPIOB_OSPEEDR, 10);
 8000476:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <main+0x108>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a1e      	ldr	r2, [pc, #120]	; (80004f4 <main+0x108>)
 800047c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000480:	6013      	str	r3, [r2, #0]
	setbit(*GPIOB_OSPEEDR, 11);
 8000482:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <main+0x108>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <main+0x108>)
 8000488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800048c:	6013      	str	r3, [r2, #0]

    init_systick(2000000, 0, 1);
 800048e:	2201      	movs	r2, #1
 8000490:	2100      	movs	r1, #0
 8000492:	4819      	ldr	r0, [pc, #100]	; (80004f8 <main+0x10c>)
 8000494:	f7ff ff70 	bl	8000378 <init_systick>

    unsigned int x;

    while(1)
    {
    	x = binary_to_bcd(a);
 8000498:	4b18      	ldr	r3, [pc, #96]	; (80004fc <main+0x110>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ff3d 	bl	800031c <binary_to_bcd>
 80004a2:	4603      	mov	r3, r0
 80004a4:	607b      	str	r3, [r7, #4]
    	display(x >> 12 & 0x0f, x >> 8 & 0x0f, x >> 4 & 0x0f, x & 0x0f);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	0b1b      	lsrs	r3, r3, #12
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	f003 030f 	and.w	r3, r3, #15
 80004b0:	b2d8      	uxtb	r0, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	0a1b      	lsrs	r3, r3, #8
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	f003 030f 	and.w	r3, r3, #15
 80004bc:	b2d9      	uxtb	r1, r3
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	091b      	lsrs	r3, r3, #4
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	f003 030f 	and.w	r3, r3, #15
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	f7ff fefa 	bl	80002cc <display>
    	x = binary_to_bcd(a);
 80004d8:	e7de      	b.n	8000498 <main+0xac>
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40023808 	.word	0x40023808
 80004e4:	40023830 	.word	0x40023830
 80004e8:	40020000 	.word	0x40020000
 80004ec:	40020008 	.word	0x40020008
 80004f0:	40020400 	.word	0x40020400
 80004f4:	40020408 	.word	0x40020408
 80004f8:	001e8480 	.word	0x001e8480
 80004fc:	2000002c 	.word	0x2000002c

08000500 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000502:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000504:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <LoopForever+0x6>)
  ldr r1, =_edata
 800050a:	490d      	ldr	r1, [pc, #52]	; (8000540 <LoopForever+0xa>)
  ldr r2, =_sidata
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <LoopForever+0xe>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000510:	e002      	b.n	8000518 <LoopCopyDataInit>

08000512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000516:	3304      	adds	r3, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800051a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800051c:	d3f9      	bcc.n	8000512 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000520:	4c0a      	ldr	r4, [pc, #40]	; (800054c <LoopForever+0x16>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000524:	e001      	b.n	800052a <LoopFillZerobss>

08000526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000528:	3204      	adds	r2, #4

0800052a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800052a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800052c:	d3fb      	bcc.n	8000526 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052e:	f000 f811 	bl	8000554 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000532:	f7ff ff5b 	bl	80003ec <main>

08000536 <LoopForever>:

LoopForever:
    b LoopForever
 8000536:	e7fe      	b.n	8000536 <LoopForever>
  ldr   r0, =_estack
 8000538:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800053c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000540:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000544:	080005bc 	.word	0x080005bc
  ldr r2, =_sbss
 8000548:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800054c:	20000030 	.word	0x20000030

08000550 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC_IRQHandler>
	...

08000554 <__libc_init_array>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	4e0d      	ldr	r6, [pc, #52]	; (800058c <__libc_init_array+0x38>)
 8000558:	4c0d      	ldr	r4, [pc, #52]	; (8000590 <__libc_init_array+0x3c>)
 800055a:	1ba4      	subs	r4, r4, r6
 800055c:	10a4      	asrs	r4, r4, #2
 800055e:	2500      	movs	r5, #0
 8000560:	42a5      	cmp	r5, r4
 8000562:	d109      	bne.n	8000578 <__libc_init_array+0x24>
 8000564:	4e0b      	ldr	r6, [pc, #44]	; (8000594 <__libc_init_array+0x40>)
 8000566:	4c0c      	ldr	r4, [pc, #48]	; (8000598 <__libc_init_array+0x44>)
 8000568:	f000 f818 	bl	800059c <_init>
 800056c:	1ba4      	subs	r4, r4, r6
 800056e:	10a4      	asrs	r4, r4, #2
 8000570:	2500      	movs	r5, #0
 8000572:	42a5      	cmp	r5, r4
 8000574:	d105      	bne.n	8000582 <__libc_init_array+0x2e>
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800057c:	4798      	blx	r3
 800057e:	3501      	adds	r5, #1
 8000580:	e7ee      	b.n	8000560 <__libc_init_array+0xc>
 8000582:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000586:	4798      	blx	r3
 8000588:	3501      	adds	r5, #1
 800058a:	e7f2      	b.n	8000572 <__libc_init_array+0x1e>
 800058c:	080005b4 	.word	0x080005b4
 8000590:	080005b4 	.word	0x080005b4
 8000594:	080005b4 	.word	0x080005b4
 8000598:	080005b8 	.word	0x080005b8

0800059c <_init>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	bf00      	nop
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr

080005a8 <_fini>:
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	bf00      	nop
 80005ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ae:	bc08      	pop	{r3}
 80005b0:	469e      	mov	lr, r3
 80005b2:	4770      	bx	lr
